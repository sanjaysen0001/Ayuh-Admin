{"version":3,"sources":["views/apps/videoCall/DemoCall.js"],"names":["userVideoCall","props","formatTime","timer","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","handlestartinterval","apicall","current","setInterval","sessionStorage","setItem","clearInterval","countRef","setState","setIsPaused","setVideoCall","swal","buttons","catch","text","value","then","handleStart","setTimer","state","handlePause","rtcProps","appId","channel","token","callbacks","user","videocall","setTimeout","history","push","React","createRef","Loader","hours","seconds","stream","changeView","userid","astroid","mobile","userData","data","toggle","userVideocalltoken","userchannel_name","localStorage","getItem","this","userchannelname","usertoken","className","style","display","width","height","Component"],"mappings":"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","file":"static/js/390.8c4bdf19.chunk.js","sourcesContent":["import { Container, Row, Col, Button, Input, Alert, Spinner } from \"reactstrap\";\r\nimport React from \"react\";\r\nimport AgoraUIKit from \"agora-react-uikit\";\r\n// import axiosConfig from \"../../axiosConfig\";\r\nimport swal from \"sweetalert\";\r\n\r\nclass userVideoCall extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.countRef = React.createRef();\r\n    this.apicall = React.createRef();\r\n\r\n    this.state = {\r\n      setTimer: 0,\r\n      Loader: false,\r\n      setIsPaused: false,\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      stream: null,\r\n      changeView: false,\r\n      videocall: true,\r\n      userid: \"\",\r\n      astroid: \"\",\r\n      mobile: \"\",\r\n      userData: {},\r\n      data: [],\r\n      setVideoCall: false,\r\n      toggle: true,\r\n      userVideocalltoken: \"\",\r\n    };\r\n  }\r\n\r\n  formatTime = (timer) => {\r\n    const getSeconds = `0${timer % 60}`.slice(-2);\r\n    const minutes = `${Math.floor(timer / 60)}`;\r\n    const getMinutes = `0${minutes % 60}`.slice(-2);\r\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\r\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\r\n  };\r\n\r\n  handlestartinterval = () => {\r\n    this.apicall.current = setInterval(() => {\r\n      // Fetchuserdetail();\r\n\r\n      // let userId = JSON.parse(localStorage.getItem(\"user_id\"));\r\n      // let astroId = localStorage.getItem(\"videoCallAstro_id\");\r\n      sessionStorage.setItem(\"typeofcall\", \"videocall\");\r\n\r\n      // let payload = {\r\n      //   userId: userId,\r\n      //   astroId: astroId,\r\n      // };\r\n      // axiosConfig\r\n      //   .post(`/user/deductChatBalance`, payload)\r\n      //   .then((res) => {\r\n      //     console.log(\"callduration\", res);\r\n      //     if (res.status === 203) {\r\n      //       console.log(\"callduration\", res.status === 203);\r\n      clearInterval(this.countRef.current);\r\n      clearInterval(this.apicall.current);\r\n      this.setState({ setIsPaused: false });\r\n      this.setState({ setVideoCall: false });\r\n      swal(\r\n        \"Low Balance\",\r\n        \"Your Balance is getting low As per minimum charge of this Doctor\",\r\n        {\r\n          buttons: {\r\n            catch: { text: \"Cancel \", value: \"catch\" },\r\n            // recharge: { text: \"Recharge NOW \", value: \"Recharge\" },\r\n          },\r\n        }\r\n      ).then((value) => {\r\n        switch (value) {\r\n          case \"catch\":\r\n            // this.props.history.push(\"/\");\r\n            break;\r\n          case \"Recharge\":\r\n            swal(\"move to recharge \");\r\n            break;\r\n          default:\r\n        }\r\n      });\r\n      //     }\r\n      //     // for low balance\r\n      //     if (res.status === 404) {\r\n      //       console.log(\"callduration\", res.status === 404);\r\n      //       clearInterval(this.countRef.current);\r\n      //       clearInterval(this.apicall.current);\r\n      //       this.setState({ setIsPaused: false });\r\n      //       this.setState({ setVideoCall: false });\r\n      //     }\r\n      //     // move to another page no balance\r\n      //   })\r\n      //   .catch((err) => {\r\n      //     console.log(err.response.data.message);\r\n      //   });\r\n    }, 60000);\r\n  };\r\n\r\n  handleStart = () => {\r\n    this.setState({ setIsPaused: true });\r\n    setInterval(() => {\r\n      this.setState({ setTimer: this.state.setTimer + 1 });\r\n    }, 1000);\r\n  };\r\n\r\n  handlePause = () => {\r\n    clearInterval(this.countRef.current);\r\n    clearInterval(this.apicall.current);\r\n    this.setState({ setIsPaused: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const userchannel_name = localStorage.getItem(\"userchannel_name\");\r\n    this.setState({ userchannelname: \"demo\" });\r\n    // const usertoken_for_videocall = localStorage.getItem(\r\n    //   \"usertoken_for_videocall\"\r\n    // );\r\n    this.setState({ usertoken: userchannel_name });\r\n    // const userid = \"001user\";\r\n    // const callingastro_id = \"001Calling\";\r\n    // api for token generation\r\n    // const payload = {\r\n    //   userAccount: userid,\r\n    //   astroAccount: callingastro_id,\r\n    // };\r\n    // axiosConfig\r\n    //   .post(`/user/userVideoCall`, payload)\r\n    //   .then((res) => {\r\n    //     console.log(object)\r\n    //     this.setState({ userVideocalltoken: res?.data?.userAccount });\r\n    //     localStorage.setItem(\"usertoken_for_videocall\", res?.data?.userAccount);\r\n    //     localStorage.setItem(\"userchannel_name\", res?.data?.channelName);\r\n    this.setState({ changeView: true });\r\n    this.setState({ setVideoCall: true });\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n\r\n    // axiosConfig\r\n    //   .get(`/user/viewoneuser/${userid}`)\r\n    //   .then((response) => {\r\n    //     console.log(\"videocal\", response);\r\n    //     this.setState({ mobile: response.data.data.mobile });\r\n    //     this.setState({ userData: response.data.data });\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(error);\r\n    //   });\r\n  }\r\n\r\n  //   changeHandler = (e) => {\r\n  //     this.setState({ [e.target.name]: e.target.value });\r\n  //   };\r\n\r\n  rtcProps = {\r\n    // Pass your App ID here.\r\n    appId: \"61a94c26a48147f4b61c2cd32be384f0\",\r\n    // Set the channel name.\r\n\r\n    channel: \"demo\",\r\n    // Pass your temp token here.\r\n    token: null,\r\n\r\n    // Set the user ID.\r\n    // uid: 1,\r\n    // Set the user role\r\n    // role: \"\",\r\n    // layout:\"\",\r\n  };\r\n  // callbacks = {\r\n  //   EndCall: () => this.setState({ videocall: false }),\r\n  // };\r\n  callbacks = {\r\n    [\"user-joined\"]: (user) => {\r\n      if (user) {\r\n        this.handleStart();\r\n        // this.handlestartinterval();\r\n        // this.setState({ Loader: false });\r\n        swal(\"Doctor Joined\");\r\n      }\r\n    },\r\n\r\n    [\"user-left\"]: (user) => {\r\n      if (user) {\r\n        swal(\"Doctor leave the Videocall\");\r\n        sessionStorage.setItem(\"typeofcall\", \"Videocall\");\r\n        this.handlePause();\r\n        clearInterval(this.apicall.current);\r\n        // let userid = localStorage.getItem(\"user_id\");\r\n        // const astroId = localStorage.getItem(\"astroId\");\r\n        // let value = {\r\n        //   userId: userid,\r\n        //   astroId: astroId,\r\n        // };\r\n        // axiosConfig\r\n        //   .post(`/user/changeStatus`, value)\r\n        //   .then((res) => {\r\n        //     console.log(res.data);\r\n        //     this.props.history.push(\"/astrorating\");\r\n        //   })\r\n        //   .catch((err) => {\r\n        //     console.log(err.response);\r\n        //   });\r\n      }\r\n    },\r\n    EndCall: () => {\r\n      this.setState({ videocall: false });\r\n      // this.setState({ setVideoCall: false });\r\n      this.handlePause();\r\n      clearInterval(this.apicall.current);\r\n      swal(\"Doctor leave the Videocall\");\r\n      setTimeout(() => {\r\n        this.props.history.push(\"/\");\r\n      }, 1000);\r\n      // sessionStorage.setItem(\"typeofcall\", \"Videocall\");\r\n      // let userid = localStorage.getItem(\"user_id\");\r\n\r\n      // const astroId = localStorage.getItem(\"astroId\");\r\n      // let value = {\r\n      //   userId: userid,\r\n      //   astroId: astroId,\r\n      // };\r\n      // axiosConfig\r\n      //   .post(`/user/changeStatus`, value)\r\n      //   .then((res) => {\r\n      //     console.log(res.data);\r\n      //     this.props.history.push(\"/astrorating\");\r\n      //   })\r\n      //   .catch((err) => {\r\n      //     console.log(err.response);\r\n      //   });\r\n    },\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.Loader ? (\r\n          <>\r\n            <div className=\"d-flex justify-content-center\">\r\n              <h2 className=\"mt-5\">Wait Till Patient Joins Room...</h2>\r\n            </div>\r\n          </>\r\n        ) : null}\r\n\r\n        <>\r\n          {this.state.changeView === true ? (\r\n            <>\r\n              <section>\r\n                {this.state.setVideoCall === true ? (\r\n                  <>\r\n                    <Row>\r\n                      <Col className=\"d-flex justify-content-center\">\r\n                        <p>\r\n                          {this.state.Loader ? null : (\r\n                            <>\r\n                              {/* <button>Join Video Call</button> */}\r\n                              {this.formatTime(this.state.setTimer)}\r\n                            </>\r\n                          )}\r\n                        </p>\r\n                      </Col>\r\n                    </Row>\r\n                    {this.state.videocall && (\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          width: \"80vw\",\r\n                          // width: \"100vw\",\r\n                          height: \"80vh\",\r\n                        }}\r\n                      >\r\n                        <AgoraUIKit\r\n                          rtcProps={this.rtcProps}\r\n                          callbacks={this.callbacks}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {\" \"}\r\n                    <div>\r\n                      Thank you for being our valued customer.<br></br> We are\r\n                      so grateful and hope we met your expectations.{\" \"}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </section>\r\n            </>\r\n          ) : null}\r\n        </>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default userVideoCall;\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   Alert,\r\n//   Button,\r\n//   Card,\r\n//   Col,\r\n//   FormGroup,\r\n//   Input,\r\n//   Label,\r\n//   Row,\r\n// } from \"reactstrap\";\r\n// import AgoraUIKit, { layout } from \"agora-react-uikit\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import axiosConfig from \"../../../axiosConfig\";\r\n// import { history } from \"../../../history\";\r\n// import swal from \"sweetalert\";\r\n\r\n// function YourVideocall() {\r\n//   const [videoCall, setVideoCall] = useState(false);\r\n//   const [channelNamecreated, setchannelName] = useState(\"\");\r\n//   const [Status, setStatus] = useState(\"\");\r\n//   const [Token, setToken] = useState(\"\");\r\n//   const [Addcall, setAddcall] = useState(false);\r\n//   const param = useParams();\r\n\r\n//   useEffect(() => {}, []);\r\n//   const rtcProps = {\r\n//     // Pass your App ID here.\r\n//     appId: \"61a94c26a48147f4b61c2cd32be384f0\",\r\n\r\n//     // channel: \"anujesh\",\r\n//     channel: channelNamecreated,\r\n//     // Pass your temp token here.\r\n//     token: (Token && Token) || localStorage.getItem(\"astrotokenforvideocall\"),\r\n\r\n//     // Set the user ID.\r\n//     uid: 0,\r\n//     // Set the user role\r\n//     // layout: layout.grid,\r\n//     // layout: isPinned ? layout.pin : layout.grid,\r\n//   };\r\n//   const callbacks = {\r\n//     [\"user-left\"]: (user) => {\r\n//       if (user) {\r\n//         swal(\"User Leave The Room\");\r\n//       }\r\n//     },\r\n//     EndCall: (e) => {\r\n//       handleCloseChat(e);\r\n//       setVideoCall(false);\r\n//       window.location.reload();\r\n//     },\r\n//   };\r\n\r\n//   const handlestatus = async (e) => {\r\n//     e.preventDefault();\r\n//     let userid = localStorage.getItem(\"CurrentChat_userid\");\r\n//     let astroid = localStorage.getItem(\"astroId\");\r\n//     let payload = {\r\n//       astroAccount: astroid,\r\n//     };\r\n//     if (Status === \"Active\") {\r\n//       await axiosConfig\r\n//         .post(`/user/astroVideoCall`, payload)\r\n//         .then((res) => {\r\n//           console.log(res.data);\r\n//           setchannelName(res.data.channelName);\r\n//           setToken(res.data.astroAccount);\r\n//           localStorage.setItem(\"astrotokenforvideocall\", res.data.astroAccount);\r\n//           if (res.data.channelName && res.data.astroAccount) {\r\n//             setAddcall(true);\r\n//             setVideoCall(true);\r\n//           }\r\n//         })\r\n//         .catch((err) => {\r\n//           console.log(err);\r\n//         });\r\n//     }\r\n//     if (Status === \"Deactive\") {\r\n//       handleCloseChat(e);\r\n//       setAddcall(false);\r\n//     }\r\n\r\n//     if ((userid !== \"\" && userid !== undefined && userid !== null) || userid) {\r\n//       let load = {\r\n//         userId: userid,\r\n//         astroId: astroid,\r\n//         type: \"Video\",\r\n//       };\r\n\r\n//       await axiosConfig\r\n//         .post(`/user/deductChatBalance`, load)\r\n//         .then((res) => {\r\n//           console.log(res);\r\n//         })\r\n//         .catch((err) => {\r\n//           console.log(err.response);\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   const handleCloseChat = (e) => {\r\n//     e.preventDefault();\r\n//     let astroid = localStorage.getItem(\"astroId\");\r\n//     let userid = localStorage.getItem(\"CurrentChat_userid\");\r\n//     let value = {\r\n//       userId: userid,\r\n//       astroId: astroid,\r\n//     };\r\n//     axiosConfig\r\n//       .post(`/user/changeStatus`, value)\r\n//       .then((res) => {\r\n//         console.log(res);\r\n//         localStorage.removeItem(\"CurrentChat_userid\");\r\n//         window.location.replace(\"/\");\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err.response.data);\r\n//       });\r\n//   };\r\n//   return (\r\n//     <div className=\"videocallmain mt-2\">\r\n//       <Card className=\"mt-2\">\r\n//         <Row>\r\n//           <Col lg=\"4\" md=\"4\" sm=\"4\">\r\n//             <div className=\"container mt-2 mb-1\">\r\n//               <Button onClick={(e) => handlestatus(e)} color=\"success\">\r\n//                 Join VideoCall\r\n//               </Button>\r\n//             </div>\r\n//           </Col>\r\n\r\n//           <Col lg=\"6\" md=\"6\" sm=\"6\">\r\n//             <div className=\"container mt-1 mb-1\">\r\n//               <Row>\r\n//                 <Col className=\"mt-1\">\r\n//                   <FormGroup check>\r\n//                     <Input\r\n//                       value=\"Active\"\r\n//                       onClick={(e) => {\r\n//                         setStatus(e.target.value);\r\n//                       }}\r\n//                       name=\"radio1\"\r\n//                       type=\"radio\"\r\n//                     />\r\n//                     <Label check>Online</Label>\r\n//                   </FormGroup>\r\n//                 </Col>\r\n//                 <Col className=\"mt-1\">\r\n//                   <FormGroup check>\r\n//                     <Input\r\n//                       value=\"Deactive\"\r\n//                       onClick={(e) => {\r\n//                         setStatus(e.target.value);\r\n//                         setAddcall(false);\r\n//                         handleCloseChat(e);\r\n//                       }}\r\n//                       name=\"radio1\"\r\n//                       type=\"radio\"\r\n//                     />{\" \"}\r\n//                     <Label check>Offline</Label>\r\n//                   </FormGroup>\r\n//                 </Col>\r\n//               </Row>\r\n//             </div>\r\n//           </Col>\r\n//           <Col>\r\n//             <Col>\r\n//               <div className=\"d-flex justify-content-end mt-1\">\r\n//                 <Button\r\n//                   className=\"closebtnchat\"\r\n//                   onClick={(e) => handleCloseChat(e)}\r\n//                   color=\"primary\"\r\n//                 >\r\n//                   Close VideoCall\r\n//                 </Button>\r\n//               </div>\r\n//             </Col>\r\n//           </Col>\r\n//         </Row>\r\n//         <Row>\r\n//           {videoCall && Status === \"Active\" ? (\r\n//             <>\r\n//               <div style={{ display: \"flex\", width: \"90vw\", height: \"80vh\" }}>\r\n//                 <AgoraUIKit rtcProps={rtcProps} callbacks={callbacks} />\r\n//               </div>\r\n//             </>\r\n//           ) : (\r\n//             <>\r\n//               {Addcall === true ? (\r\n//                 <>\r\n//                   {/* <div className=\"mx-2 mb-2\"> */}\r\n//                   {/* <Button onClick={() => setVideoCall(true)} color=\"success\">\r\n//                       Click to join Now\r\n//                     </Button> */}\r\n//                   {/* </div> */}\r\n//                 </>\r\n//               ) : null}\r\n//             </>\r\n//           )}\r\n//         </Row>\r\n//       </Card>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default YourVideocall;\r\n\r\n// import React, { useState } from \"react\";\r\n// import AgoraUIKit from \"agora-react-uikit\";\r\n\r\n// const DemoCall = () => {\r\n//   const [videoCall, setVideoCall] = useState(true);\r\n//   const rtcProps = {\r\n//     appId: \"61a94c26a48147f4b61c2cd32be384f0\",\r\n//     channel: \"demo\",\r\n//     token: null,\r\n//   };\r\n//   const callbacks = {\r\n//     EndCall: () => setVideoCall(false),\r\n//   };\r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         display: \"flex\",\r\n//         justifyContent: \"center\",\r\n//         alignItems: \"center\",\r\n//         width: \"100vw\",\r\n//         height: \"100vh\",\r\n//       }}\r\n//     >\r\n//       {videoCall ? (\r\n//         <AgoraUIKit\r\n//           rtcProps={rtcProps}\r\n//           callbacks={callbacks}\r\n//           style={{ width: \"100%\", height: \"100%\" }}\r\n//         />\r\n//       ) : (\r\n//         <h3 onClick={() => setVideoCall(true)}>Start Call</h3>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DemoCall;\r\n\r\n// import React, { useState } from \"react\";\r\n\r\n// const ToDoList = () => {\r\n//   const [todos, setTodos] = useState([]);\r\n//   const [currentTodo, setCurrentTodo] = useState({\r\n//     id: null,\r\n//     name: \"\",\r\n//     address: \"\",\r\n//   });\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setCurrentTodo({\r\n//       ...currentTodo,\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   const addTodo = () => {\r\n//     if (currentTodo.name && currentTodo.address) {\r\n//       setTodos([...todos, { ...currentTodo, id: Date.now() }]);\r\n//       setCurrentTodo({ id: null, name: \"\", address: \"\" });\r\n//     }\r\n//   };\r\n\r\n//   const editTodo = (todo) => {\r\n//     setCurrentTodo(todo);\r\n//     setIsEditing(true);\r\n//   };\r\n\r\n//   const updateTodo = () => {\r\n//     setTodos(\r\n//       todos.map((todo) => (todo.id === currentTodo.id ? currentTodo : todo))\r\n//     );\r\n//     setCurrentTodo({ id: null, name: \"\", address: \"\" });\r\n//     setIsEditing(false);\r\n//   };\r\n\r\n//   const deleteTodo = (id) => {\r\n//     setTodos(todos.filter((todo) => todo.id !== id));\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>To-Do List</h1>\r\n//       <div>\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"name\"\r\n//           placeholder=\"Name\"\r\n//           value={currentTodo.name}\r\n//           onChange={handleChange}\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"address\"\r\n//           placeholder=\"Address\"\r\n//           value={currentTodo.address}\r\n//           onChange={handleChange}\r\n//         />\r\n//         {isEditing ? (\r\n//           <button onClick={updateTodo}>Update</button>\r\n//         ) : (\r\n//           <button onClick={addTodo}>Add</button>\r\n//         )}\r\n//       </div>\r\n//       <ul>\r\n//         {todos.map((todo) => (\r\n//           <li key={todo.id}>\r\n//             <span>\r\n//               ID: {todo.id}, Name: {todo.name}, Address: {todo.address}\r\n//             </span>\r\n//             <button onClick={() => editTodo(todo)}>Edit</button>\r\n//             <button onClick={() => deleteTodo(todo.id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ToDoList;\r\n"],"sourceRoot":""}