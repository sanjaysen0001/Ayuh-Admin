{"version":3,"sources":["views/apps/productmanager/product/addmedicineform.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"names":["AddMedicineForm","useState","medicineType","medicineName","unit","medicineDetails","price","image","status","data","setData","history","useHistory","handleInputChange","e","target","name","value","onClick","goBack","className","onSubmit","preventDefault","FormData","append","state","title","productname","category","desc","qsCount","selectedFile","file","axiosConfig","post","then","response","console","log","swal","props","push","catch","error","lg","md","sm","for","type","id","onChange","placeholder","required","imageFile","files","accept","label","checked","color","_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","i","F","s","n","length","done","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2"],"mappings":"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","file":"static/js/324.6ab898da.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport swal from \"sweetalert\";\r\nconst AddMedicineForm = () => {\r\n  const [data, setData] = useState({\r\n    medicineType: \"\",\r\n    medicineName: \"\",\r\n    unit: \"\",\r\n    medicineDetails: \"\",\r\n    price: \"\",\r\n    image: null,\r\n    status: \"active\",\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData({ ...data, [name]: value });\r\n  };\r\n\r\n  const handleImageChange = (e) => {\r\n    const imageFile = e.target.files[0];\r\n    setData({ ...data, image: imageFile });\r\n  };\r\n\r\n  // const handleSubmit = (e) => {\r\n  //   e.preventDefault();\r\n  //   // Handle form submission logic here, e.g., send data to backend\r\n  //   console.log(data);\r\n  //   // Reset form fields after submission\r\n  //   setData({\r\n  //     medicineType: \"\",\r\n  //     medicineName: \"\",\r\n  //     unit: \"\",\r\n  //     medicineDetails: \"\",\r\n  //     price: \"\",\r\n  //     image: null,\r\n  //     status: \"active\",\r\n  //   });\r\n  // };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const data = new FormData();\r\n    data.append(\"title\", this.state.title);\r\n    data.append(\"productname\", this.state.productname);\r\n    data.append(\"category\", this.state.category);\r\n    data.append(\"desc\", this.state.desc);\r\n    data.append(\"price\", this.state.price);\r\n    data.append(\"qsCount\", this.state.qsCount);\r\n    // data.append(\"limit\", this.state.limit);\r\n\r\n    data.append(\"status\", this.state.status);\r\n\r\n    for (const file of this.state.selectedFile) {\r\n      if (this.state.selectedFile !== null) {\r\n        data.append(\"image\", file);\r\n      }\r\n    }\r\n\r\n    axiosConfig\r\n      .post(`/admin/addProduct`, data)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        swal(\"Product Added Successful\");\r\n        this.props.history.push(\"/app/productmanager/product/productList\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <h1>Add Medicine</h1>\r\n        <Button\r\n          onClick={() => history.goBack()}\r\n          className=\"btn btn-danger float-right\"\r\n        >\r\n          Back\r\n        </Button>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Row>\r\n            <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n              <Label for=\"medicineType\">Medicine Type:</Label>\r\n              <FormGroup>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"medicineType\"\r\n                  id=\"medicineType\"\r\n                  value={data.medicineType}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter medicine type\"\r\n                  required\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n              <Label for=\"medicineName\">Medicine Name:</Label>\r\n              <FormGroup>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"medicineName\"\r\n                  id=\"medicineName\"\r\n                  value={data.medicineName}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter medicine name\"\r\n                  required\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n              <FormGroup>\r\n                <Label for=\"unit\">Unit:</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"unit\"\r\n                  id=\"unit\"\r\n                  value={data.unit}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter unit\"\r\n                  required\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n              <FormGroup>\r\n                <Label for=\"medicineDetails\">Medicine Details:</Label>\r\n                <Input\r\n                  type=\"textarea\"\r\n                  name=\"medicineDetails\"\r\n                  id=\"medicineDetails\"\r\n                  value={data.medicineDetails}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter medicine details\"\r\n                  required\r\n                />\r\n              </FormGroup>\r\n            </Col>{\" \"}\r\n            <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n              <FormGroup>\r\n                <Label for=\"price\">Price:</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"price\"\r\n                  id=\"price\"\r\n                  value={data.price}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter price\"\r\n                  required\r\n                />\r\n              </FormGroup>\r\n            </Col>{\" \"}\r\n            <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n              <FormGroup>\r\n                <Label for=\"image\">Image:</Label>\r\n                <Input\r\n                  type=\"file\"\r\n                  name=\"image\"\r\n                  id=\"image\"\r\n                  onChange={handleImageChange}\r\n                  accept=\"image/*\"\r\n                  required\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col>\r\n              <Row>\r\n                <Label for=\"status\" sm={2}>\r\n                  Status:\r\n                </Label>\r\n                <CustomInput\r\n                  type=\"radio\"\r\n                  className=\"mt-1\"\r\n                  id=\"active\"\r\n                  name=\"status\"\r\n                  label=\"Active\"\r\n                  value=\"active\"\r\n                  checked={data.status === \"active\"}\r\n                  onChange={handleInputChange}\r\n                />\r\n\r\n                <CustomInput\r\n                  type=\"radio\"\r\n                  className=\"mt-1\"\r\n                  id=\"inactive\"\r\n                  name=\"status\"\r\n                  label=\"Inactive\"\r\n                  value=\"inactive\"\r\n                  checked={data.status === \"inactive\"}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </Row>\r\n            </Col>\r\n            <Col>\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddMedicineForm;\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"sourceRoot":""}